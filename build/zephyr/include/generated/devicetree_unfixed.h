/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   esp32.dts.pre.tmp
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /wifi
 *   4   /cpus
 *   5   /cpus/cpu@0
 *   6   /cpus/cpu@1
 *   7   /soc
 *   8   /soc/counter@3ff5f000
 *   9   /soc/counter@3ff5f024
 *   10  /soc/counter@3ff60000
 *   11  /soc/counter@3ff60024
 *   12  /soc/gpio@3ff44000
 *   13  /soc/gpio@3ff44800
 *   14  /soc/rtc@3ff48000
 *   15  /soc/i2c@3ff53000
 *   16  /soc/i2c@3ff67000
 *   17  /soc/memory@3ffb0000
 *   18  /soc/pinmux@3ff49000
 *   19  /soc/spi@3ff64000
 *   20  /soc/spi@3ff65000
 *   21  /soc/trng@3ff75144
 *   22  /soc/uart@3ff40000
 *   23  /soc/uart@3ff50000
 *   24  /soc/uart@3ff6e000
 *   25  /soc/watchdog@3ff5f048
 *   26  /soc/watchdog@3ff60048
 *   27  /soc/flash-controller@3ff42000
 *   28  /soc/flash-controller@3ff42000/flash@0
 *   29  /soc/flash-controller@3ff42000/flash@0/partitions
 *   30  /soc/flash-controller@3ff42000/flash@0/partitions/partition@9000
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_wifi)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /wifi */ \
	4, /* /cpus */ \
	7, /* /soc */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_espressif_esp32 DT_N

/* Special property macros: */
#define DT_N_REG_NUM 0
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_espressif_esp32 1
#define DT_N_STATUS_okay 1

/* Generic property macros: */
#define DT_N_P_compatible {"espressif,esp32"}
#define DT_N_P_compatible_IDX_0 "espressif,esp32"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Special property macros: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Special property macros: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* (No generic property macros) */

/*
 * Devicetree node: /wifi
 *
 * Node identifier: DT_N_S_wifi
 */

/* Node's full path: */
#define DT_N_S_wifi_PATH "/wifi"

/* Node's name with unit-address: */
#define DT_N_S_wifi_FULL_NAME "wifi"

/* Node parent (/) identifier: */
#define DT_N_S_wifi_PARENT DT_N
#define DT_N_S_wifi_FOREACH_CHILD(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_wifi_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_wifi_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_wifi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_wifi_EXISTS 1
#define DT_N_INST_0_espressif_esp32_wifi DT_N_S_wifi
#define DT_N_NODELABEL_wifi              DT_N_S_wifi

/* Special property macros: */
#define DT_N_S_wifi_REG_NUM 0
#define DT_N_S_wifi_IRQ_NUM 0
#define DT_N_S_wifi_COMPAT_MATCHES_espressif_esp32_wifi 1
#define DT_N_S_wifi_STATUS_disabled 1

/* Generic property macros: */
#define DT_N_S_wifi_P_compatible {"espressif,esp32-wifi"}
#define DT_N_S_wifi_P_compatible_IDX_0 "espressif,esp32-wifi"
#define DT_N_S_wifi_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, compatible, 0)
#define DT_N_S_wifi_P_compatible_LEN 1
#define DT_N_S_wifi_P_compatible_EXISTS 1
#define DT_N_S_wifi_P_status "disabled"
#define DT_N_S_wifi_P_status_ENUM_IDX 2
#define DT_N_S_wifi_P_status_ENUM_TOKEN disabled
#define DT_N_S_wifi_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, status, 0) \
	fn(DT_N_S_wifi, status, 1) \
	fn(DT_N_S_wifi, status, 2) \
	fn(DT_N_S_wifi, status, 3) \
	fn(DT_N_S_wifi, status, 4) \
	fn(DT_N_S_wifi, status, 5) \
	fn(DT_N_S_wifi, status, 6) \
	fn(DT_N_S_wifi, status, 7)
#define DT_N_S_wifi_P_status_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	5, /* /cpus/cpu@0 */ \
	6, /* /cpus/cpu@1 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Special property macros: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = cadence,tensilica-xtensa-lx6):
 *   $ZEPHYR_BASE/dts/bindings/cpu/cadence,tensilica-xtensa-lx6.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	4, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_cadence_tensilica_xtensa_lx6 DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0                      DT_N_S_cpus_S_cpu_0

/* Special property macros: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_cadence_tensilica_xtensa_lx6 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_clock_source 1
#define DT_N_S_cpus_S_cpu_0_P_clock_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency 240
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"cadence,tensilica-xtensa-lx6"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "cadence,tensilica-xtensa-lx6"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@1
 *
 * Node identifier: DT_N_S_cpus_S_cpu_1
 *
 * Binding (compatible = cadence,tensilica-xtensa-lx6):
 *   $ZEPHYR_BASE/dts/bindings/cpu/cadence,tensilica-xtensa-lx6.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_1_PATH "/cpus/cpu@1"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_1_FULL_NAME "cpu@1"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_1_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_1_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_1_REQUIRES_ORDS \
	4, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_1_EXISTS 1
#define DT_N_INST_1_cadence_tensilica_xtensa_lx6 DT_N_S_cpus_S_cpu_1
#define DT_N_NODELABEL_cpu1                      DT_N_S_cpus_S_cpu_1

/* Special property macros: */
#define DT_N_S_cpus_S_cpu_1_REG_NUM 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_cpus_S_cpu_1_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_1_COMPAT_MATCHES_cadence_tensilica_xtensa_lx6 1
#define DT_N_S_cpus_S_cpu_1_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_1_P_clock_source 1
#define DT_N_S_cpus_S_cpu_1_P_clock_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_clock_frequency 240
#define DT_N_S_cpus_S_cpu_1_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible {"cadence,tensilica-xtensa-lx6"}
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0 "cadence,tensilica-xtensa-lx6"
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg {1 /* 0x1 */}
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0 1
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, reg, 0)
#define DT_N_S_cpus_S_cpu_1_P_reg_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_rtc_3ff48000) fn(DT_N_S_soc_S_flash_controller_3ff42000) fn(DT_N_S_soc_S_uart_3ff40000) fn(DT_N_S_soc_S_uart_3ff50000) fn(DT_N_S_soc_S_uart_3ff6e000) fn(DT_N_S_soc_S_pinmux_3ff49000) fn(DT_N_S_soc_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_3ff44800) fn(DT_N_S_soc_S_i2c_3ff53000) fn(DT_N_S_soc_S_i2c_3ff67000) fn(DT_N_S_soc_S_trng_3ff75144) fn(DT_N_S_soc_S_watchdog_3ff5f048) fn(DT_N_S_soc_S_watchdog_3ff60048) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000) fn(DT_N_S_soc_S_counter_3ff5f000) fn(DT_N_S_soc_S_counter_3ff5f024) fn(DT_N_S_soc_S_counter_3ff60000) fn(DT_N_S_soc_S_counter_3ff60024)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_memory_3ffb0000) fn(DT_N_S_soc_S_rtc_3ff48000) fn(DT_N_S_soc_S_flash_controller_3ff42000) fn(DT_N_S_soc_S_uart_3ff40000) fn(DT_N_S_soc_S_pinmux_3ff49000) fn(DT_N_S_soc_S_gpio_3ff44000) fn(DT_N_S_soc_S_gpio_3ff44800) fn(DT_N_S_soc_S_i2c_3ff53000) fn(DT_N_S_soc_S_trng_3ff75144) fn(DT_N_S_soc_S_watchdog_3ff5f048) fn(DT_N_S_soc_S_spi_3ff64000) fn(DT_N_S_soc_S_spi_3ff65000) fn(DT_N_S_soc_S_counter_3ff5f000) fn(DT_N_S_soc_S_counter_3ff5f024) fn(DT_N_S_soc_S_counter_3ff60000) fn(DT_N_S_soc_S_counter_3ff60024) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	8, /* /soc/counter@3ff5f000 */ \
	9, /* /soc/counter@3ff5f024 */ \
	10, /* /soc/counter@3ff60000 */ \
	11, /* /soc/counter@3ff60024 */ \
	12, /* /soc/gpio@3ff44000 */ \
	13, /* /soc/gpio@3ff44800 */ \
	14, /* /soc/rtc@3ff48000 */ \
	15, /* /soc/i2c@3ff53000 */ \
	16, /* /soc/i2c@3ff67000 */ \
	17, /* /soc/memory@3ffb0000 */ \
	18, /* /soc/pinmux@3ff49000 */ \
	19, /* /soc/spi@3ff64000 */ \
	20, /* /soc/spi@3ff65000 */ \
	21, /* /soc/trng@3ff75144 */ \
	22, /* /soc/uart@3ff40000 */ \
	23, /* /soc/uart@3ff50000 */ \
	24, /* /soc/uart@3ff6e000 */ \
	25, /* /soc/watchdog@3ff5f048 */ \
	26, /* /soc/watchdog@3ff60048 */ \
	27, /* /soc/flash-controller@3ff42000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Special property macros: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff5f000
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff5f000
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff5f000_PATH "/soc/counter@3ff5f000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff5f000_FULL_NAME "counter@3ff5f000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff5f000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff5f000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff5f000_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff5f000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff5f000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff5f000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_timer DT_N_S_soc_S_counter_3ff5f000
#define DT_N_NODELABEL_timer0             DT_N_S_soc_S_counter_3ff5f000

/* Special property macros: */
#define DT_N_S_soc_S_counter_3ff5f000_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_VAL_ADDRESS 1073082368 /* 0x3ff5f000 */
#define DT_N_S_soc_S_counter_3ff5f000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff5f000_IRQ_NUM 0
#define DT_N_S_soc_S_counter_3ff5f000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff5f000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, compatible, 0)
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff5f000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg {1073082368 /* 0x3ff5f000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_0 1073082368
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, reg, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f000, reg, 1)
#define DT_N_S_soc_S_counter_3ff5f000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_label "TIMG0_T0"
#define DT_N_S_soc_S_counter_3ff5f000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, label, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 1) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 2) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 3) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 4) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 5) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 6) \
	fn(DT_N_S_soc_S_counter_3ff5f000, label, 7)
#define DT_N_S_soc_S_counter_3ff5f000_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f000_P_status "okay"
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_3ff5f000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff5f000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f000, status, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 1) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 2) \
	fn(DT_N_S_soc_S_counter_3ff5f000, status, 3)
#define DT_N_S_soc_S_counter_3ff5f000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff5f024
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff5f024
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff5f024_PATH "/soc/counter@3ff5f024"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff5f024_FULL_NAME "counter@3ff5f024"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff5f024_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff5f024_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff5f024_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff5f024_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff5f024_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff5f024_EXISTS 1
#define DT_N_INST_1_espressif_esp32_timer DT_N_S_soc_S_counter_3ff5f024
#define DT_N_NODELABEL_timer1             DT_N_S_soc_S_counter_3ff5f024

/* Special property macros: */
#define DT_N_S_soc_S_counter_3ff5f024_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_VAL_ADDRESS 1073082404 /* 0x3ff5f024 */
#define DT_N_S_soc_S_counter_3ff5f024_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff5f024_IRQ_NUM 0
#define DT_N_S_soc_S_counter_3ff5f024_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff5f024_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, compatible, 0)
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff5f024_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg {1073082404 /* 0x3ff5f024 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_0 1073082404
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, reg, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f024, reg, 1)
#define DT_N_S_soc_S_counter_3ff5f024_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_label "TIMG0_T1"
#define DT_N_S_soc_S_counter_3ff5f024_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, label, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 1) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 2) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 3) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 4) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 5) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 6) \
	fn(DT_N_S_soc_S_counter_3ff5f024, label, 7)
#define DT_N_S_soc_S_counter_3ff5f024_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_3ff5f024_P_status "okay"
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_3ff5f024_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff5f024_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff5f024, status, 0) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 1) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 2) \
	fn(DT_N_S_soc_S_counter_3ff5f024, status, 3)
#define DT_N_S_soc_S_counter_3ff5f024_P_status_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff60000
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff60000
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff60000_PATH "/soc/counter@3ff60000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff60000_FULL_NAME "counter@3ff60000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff60000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff60000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff60000_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff60000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff60000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff60000_EXISTS 1
#define DT_N_INST_2_espressif_esp32_timer DT_N_S_soc_S_counter_3ff60000
#define DT_N_NODELABEL_timer2             DT_N_S_soc_S_counter_3ff60000

/* Special property macros: */
#define DT_N_S_soc_S_counter_3ff60000_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_VAL_ADDRESS 1073086464 /* 0x3ff60000 */
#define DT_N_S_soc_S_counter_3ff60000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff60000_IRQ_NUM 0
#define DT_N_S_soc_S_counter_3ff60000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff60000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff60000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, compatible, 0)
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff60000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg {1073086464 /* 0x3ff60000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_0 1073086464
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff60000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, reg, 0) \
	fn(DT_N_S_soc_S_counter_3ff60000, reg, 1)
#define DT_N_S_soc_S_counter_3ff60000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_label "TIMG1_T0"
#define DT_N_S_soc_S_counter_3ff60000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, label, 0) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 1) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 2) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 3) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 4) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 5) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 6) \
	fn(DT_N_S_soc_S_counter_3ff60000, label, 7)
#define DT_N_S_soc_S_counter_3ff60000_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60000_P_status "okay"
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_3ff60000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff60000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60000, status, 0) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 1) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 2) \
	fn(DT_N_S_soc_S_counter_3ff60000, status, 3)
#define DT_N_S_soc_S_counter_3ff60000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/counter@3ff60024
 *
 * Node identifier: DT_N_S_soc_S_counter_3ff60024
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_3ff60024_PATH "/soc/counter@3ff60024"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_3ff60024_FULL_NAME "counter@3ff60024"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_3ff60024_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_3ff60024_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_3ff60024_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_3ff60024_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_3ff60024_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_3ff60024_EXISTS 1
#define DT_N_INST_3_espressif_esp32_timer DT_N_S_soc_S_counter_3ff60024
#define DT_N_NODELABEL_timer3             DT_N_S_soc_S_counter_3ff60024

/* Special property macros: */
#define DT_N_S_soc_S_counter_3ff60024_REG_NUM 1
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_VAL_ADDRESS 1073086500 /* 0x3ff60024 */
#define DT_N_S_soc_S_counter_3ff60024_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_3ff60024_IRQ_NUM 0
#define DT_N_S_soc_S_counter_3ff60024_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_3ff60024_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_counter_3ff60024_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, compatible, 0)
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_3ff60024_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg {1073086500 /* 0x3ff60024 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_0 1073086500
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_3ff60024_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, reg, 0) \
	fn(DT_N_S_soc_S_counter_3ff60024, reg, 1)
#define DT_N_S_soc_S_counter_3ff60024_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_label "TIMG1_T1"
#define DT_N_S_soc_S_counter_3ff60024_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, label, 0) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 1) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 2) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 3) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 4) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 5) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 6) \
	fn(DT_N_S_soc_S_counter_3ff60024, label, 7)
#define DT_N_S_soc_S_counter_3ff60024_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_3ff60024_P_status "okay"
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_3ff60024_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_3ff60024_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_3ff60024, status, 0) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 1) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 2) \
	fn(DT_N_S_soc_S_counter_3ff60024, status, 3)
#define DT_N_S_soc_S_counter_3ff60024_P_status_EXISTS 1

/*
 * Devicetree node: /soc/gpio@3ff44000
 *
 * Node identifier: DT_N_S_soc_S_gpio_3ff44000
 *
 * Binding (compatible = espressif,esp32-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/espressif,esp32-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_3ff44000_PATH "/soc/gpio@3ff44000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_3ff44000_FULL_NAME "gpio@3ff44000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_3ff44000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_3ff44000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_3ff44000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_3ff44000_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_3ff44000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_3ff44000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_3ff44000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_gpio DT_N_S_soc_S_gpio_3ff44000
#define DT_N_NODELABEL_gpio0             DT_N_S_soc_S_gpio_3ff44000

/* Special property macros: */
#define DT_N_S_soc_S_gpio_3ff44000_REG_NUM 1
#define DT_N_S_soc_S_gpio_3ff44000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_REG_IDX_0_VAL_ADDRESS 1072971776 /* 0x3ff44000 */
#define DT_N_S_soc_S_gpio_3ff44000_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_gpio_3ff44000_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_3ff44000_COMPAT_MATCHES_espressif_esp32_gpio 1
#define DT_N_S_soc_S_gpio_3ff44000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_3ff44000_P_reg {1072971776 /* 0x3ff44000 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_IDX_0 1072971776
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_IDX_1 2048
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44000, reg, 1)
#define DT_N_S_soc_S_gpio_3ff44000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_label "GPIO_0"
#define DT_N_S_soc_S_gpio_3ff44000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44000, label, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 1) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 2) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 3) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 4) \
	fn(DT_N_S_soc_S_gpio_3ff44000, label, 5)
#define DT_N_S_soc_S_gpio_3ff44000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_3ff44000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_ngpios 32
#define DT_N_S_soc_S_gpio_3ff44000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible {"espressif,esp32-gpio"}
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_IDX_0 "espressif,esp32-gpio"
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44000, compatible, 0)
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_3ff44000_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/gpio@3ff44800
 *
 * Node identifier: DT_N_S_soc_S_gpio_3ff44800
 *
 * Binding (compatible = espressif,esp32-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/espressif,esp32-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_3ff44800_PATH "/soc/gpio@3ff44800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_3ff44800_FULL_NAME "gpio@3ff44800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_3ff44800_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_3ff44800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_3ff44800_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_3ff44800_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_3ff44800_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_3ff44800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_3ff44800_EXISTS 1
#define DT_N_INST_1_espressif_esp32_gpio DT_N_S_soc_S_gpio_3ff44800
#define DT_N_NODELABEL_gpio1             DT_N_S_soc_S_gpio_3ff44800

/* Special property macros: */
#define DT_N_S_soc_S_gpio_3ff44800_REG_NUM 1
#define DT_N_S_soc_S_gpio_3ff44800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_REG_IDX_0_VAL_ADDRESS 1072973824 /* 0x3ff44800 */
#define DT_N_S_soc_S_gpio_3ff44800_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_gpio_3ff44800_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_3ff44800_COMPAT_MATCHES_espressif_esp32_gpio 1
#define DT_N_S_soc_S_gpio_3ff44800_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_3ff44800_P_reg {1072973824 /* 0x3ff44800 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_IDX_0 1072973824
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_IDX_1 2048
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44800, reg, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44800, reg, 1)
#define DT_N_S_soc_S_gpio_3ff44800_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_label "GPIO_1"
#define DT_N_S_soc_S_gpio_3ff44800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44800, label, 0) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 1) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 2) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 3) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 4) \
	fn(DT_N_S_soc_S_gpio_3ff44800, label, 5)
#define DT_N_S_soc_S_gpio_3ff44800_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_3ff44800_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_ngpios 8
#define DT_N_S_soc_S_gpio_3ff44800_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible {"espressif,esp32-gpio"}
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_IDX_0 "espressif,esp32-gpio"
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_3ff44800, compatible, 0)
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_3ff44800_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/rtc@3ff48000
 *
 * Node identifier: DT_N_S_soc_S_rtc_3ff48000
 *
 * Binding (compatible = espressif,esp32-rtc):
 *   $ZEPHYR_BASE/dts/bindings/clock/espressif,esp32-rtc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_3ff48000_PATH "/soc/rtc@3ff48000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_3ff48000_FULL_NAME "rtc@3ff48000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_rtc_3ff48000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_rtc_3ff48000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_3ff48000_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_3ff48000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_3ff48000_SUPPORTS_ORDS \
	15, /* /soc/i2c@3ff53000 */ \
	16, /* /soc/i2c@3ff67000 */ \
	19, /* /soc/spi@3ff64000 */ \
	20, /* /soc/spi@3ff65000 */ \
	22, /* /soc/uart@3ff40000 */ \
	23, /* /soc/uart@3ff50000 */ \
	24, /* /soc/uart@3ff6e000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_3ff48000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_rtc DT_N_S_soc_S_rtc_3ff48000
#define DT_N_NODELABEL_rtc              DT_N_S_soc_S_rtc_3ff48000

/* Special property macros: */
#define DT_N_S_soc_S_rtc_3ff48000_REG_NUM 1
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_VAL_ADDRESS 1072988160 /* 0x3ff48000 */
#define DT_N_S_soc_S_rtc_3ff48000_REG_IDX_0_VAL_SIZE 216 /* 0xd8 */
#define DT_N_S_soc_S_rtc_3ff48000_IRQ_NUM 0
#define DT_N_S_soc_S_rtc_3ff48000_COMPAT_MATCHES_espressif_esp32_rtc 1
#define DT_N_S_soc_S_rtc_3ff48000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_3ff48000_P_reg {1072988160 /* 0x3ff48000 */, 216 /* 0xd8 */}
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_0 1072988160
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_1 216
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, reg, 0) \
	fn(DT_N_S_soc_S_rtc_3ff48000, reg, 1)
#define DT_N_S_soc_S_rtc_3ff48000_P_reg_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_label "RTC"
#define DT_N_S_soc_S_rtc_3ff48000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, label, 0) \
	fn(DT_N_S_soc_S_rtc_3ff48000, label, 1) \
	fn(DT_N_S_soc_S_rtc_3ff48000, label, 2)
#define DT_N_S_soc_S_rtc_3ff48000_P_label_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_xtal_freq 0
#define DT_N_S_soc_S_rtc_3ff48000_P_xtal_freq_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_xtal_div 0
#define DT_N_S_soc_S_rtc_3ff48000_P_xtal_div_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_status "ok"
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_IDX 0
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_TOKEN ok
#define DT_N_S_soc_S_rtc_3ff48000_P_status_ENUM_UPPER_TOKEN OK
#define DT_N_S_soc_S_rtc_3ff48000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, status, 0) \
	fn(DT_N_S_soc_S_rtc_3ff48000, status, 1)
#define DT_N_S_soc_S_rtc_3ff48000_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible {"espressif,esp32-rtc"}
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0 "espressif,esp32-rtc"
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_3ff48000, compatible, 0)
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_3ff48000_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/i2c@3ff53000
 *
 * Node identifier: DT_N_S_soc_S_i2c_3ff53000
 *
 * Binding (compatible = espressif,esp32-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/espressif,esp32-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_3ff53000_PATH "/soc/i2c@3ff53000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_3ff53000_FULL_NAME "i2c@3ff53000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_3ff53000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_3ff53000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_3ff53000_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_3ff53000_REQUIRES_ORDS \
	7, /* /soc */ \
	14, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_3ff53000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_3ff53000_EXISTS 1
#define DT_N_ALIAS_i2c_0                DT_N_S_soc_S_i2c_3ff53000
#define DT_N_INST_0_espressif_esp32_i2c DT_N_S_soc_S_i2c_3ff53000
#define DT_N_NODELABEL_i2c0             DT_N_S_soc_S_i2c_3ff53000

/* Special property macros: */
#define DT_N_S_soc_S_i2c_3ff53000_REG_NUM 1
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_VAL_ADDRESS 1073033216 /* 0x3ff53000 */
#define DT_N_S_soc_S_i2c_3ff53000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_3ff53000_IRQ_NUM 0
#define DT_N_S_soc_S_i2c_3ff53000_COMPAT_MATCHES_espressif_esp32_i2c 1
#define DT_N_S_soc_S_i2c_3ff53000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_3ff53000_P_reg {1073033216 /* 0x3ff53000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_0 1073033216
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_3ff53000, reg, 1)
#define DT_N_S_soc_S_i2c_3ff53000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_pin 21
#define DT_N_S_soc_S_i2c_3ff53000_P_sda_pin_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_pin 22
#define DT_N_S_soc_S_i2c_3ff53000_P_scl_pin_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clock_frequency 400000
#define DT_N_S_soc_S_i2c_3ff53000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_label "I2C_0"
#define DT_N_S_soc_S_i2c_3ff53000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, label, 0) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 1) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 2) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 3) \
	fn(DT_N_S_soc_S_i2c_3ff53000, label, 4)
#define DT_N_S_soc_S_i2c_3ff53000_P_label_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status "okay"
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_i2c_3ff53000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_3ff53000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, status, 0) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 1) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 2) \
	fn(DT_N_S_soc_S_i2c_3ff53000, status, 3)
#define DT_N_S_soc_S_i2c_3ff53000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible {"espressif,esp32-i2c"}
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0 "espressif,esp32-i2c"
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, compatible, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_VAL_offset 7
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff53000, clocks, 0)
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_3ff53000_P_clocks_EXISTS 1

/*
 * Devicetree node: /soc/i2c@3ff67000
 *
 * Node identifier: DT_N_S_soc_S_i2c_3ff67000
 *
 * Binding (compatible = espressif,esp32-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/espressif,esp32-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_3ff67000_PATH "/soc/i2c@3ff67000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_3ff67000_FULL_NAME "i2c@3ff67000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_3ff67000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_3ff67000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_3ff67000_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_3ff67000_REQUIRES_ORDS \
	7, /* /soc */ \
	14, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_3ff67000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_3ff67000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_i2c DT_N_S_soc_S_i2c_3ff67000
#define DT_N_NODELABEL_i2c1             DT_N_S_soc_S_i2c_3ff67000

/* Special property macros: */
#define DT_N_S_soc_S_i2c_3ff67000_REG_NUM 1
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_VAL_ADDRESS 1073115136 /* 0x3ff67000 */
#define DT_N_S_soc_S_i2c_3ff67000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_3ff67000_IRQ_NUM 0
#define DT_N_S_soc_S_i2c_3ff67000_COMPAT_MATCHES_espressif_esp32_i2c 1
#define DT_N_S_soc_S_i2c_3ff67000_STATUS_disabled 1

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_3ff67000_P_reg {1073115136 /* 0x3ff67000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_0 1073115136
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_3ff67000, reg, 1)
#define DT_N_S_soc_S_i2c_3ff67000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_sda_pin 18
#define DT_N_S_soc_S_i2c_3ff67000_P_sda_pin_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_scl_pin 5
#define DT_N_S_soc_S_i2c_3ff67000_P_scl_pin_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clock_frequency 400000
#define DT_N_S_soc_S_i2c_3ff67000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_label "I2C_1"
#define DT_N_S_soc_S_i2c_3ff67000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, label, 0) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 1) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 2) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 3) \
	fn(DT_N_S_soc_S_i2c_3ff67000, label, 4)
#define DT_N_S_soc_S_i2c_3ff67000_P_label_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_status "disabled"
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_3ff67000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_3ff67000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, status, 0) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 1) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 2) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 3) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 4) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 5) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 6) \
	fn(DT_N_S_soc_S_i2c_3ff67000, status, 7)
#define DT_N_S_soc_S_i2c_3ff67000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible {"espressif,esp32-i2c"}
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0 "espressif,esp32-i2c"
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, compatible, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_VAL_offset 18
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_3ff67000, clocks, 0)
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_3ff67000_P_clocks_EXISTS 1

/*
 * Devicetree node: /soc/memory@3ffb0000
 *
 * Node identifier: DT_N_S_soc_S_memory_3ffb0000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_3ffb0000_PATH "/soc/memory@3ffb0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_3ffb0000_FULL_NAME "memory@3ffb0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_3ffb0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_3ffb0000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_3ffb0000_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_3ffb0000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_3ffb0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_3ffb0000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_memory_3ffb0000
#define DT_N_NODELABEL_sram0  DT_N_S_soc_S_memory_3ffb0000

/* Special property macros: */
#define DT_N_S_soc_S_memory_3ffb0000_REG_NUM 1
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_VAL_ADDRESS 1073414144 /* 0x3ffb0000 */
#define DT_N_S_soc_S_memory_3ffb0000_REG_IDX_0_VAL_SIZE 327680 /* 0x50000 */
#define DT_N_S_soc_S_memory_3ffb0000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_3ffb0000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_3ffb0000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_memory_3ffb0000_P_reg {1073414144 /* 0x3ffb0000 */, 327680 /* 0x50000 */}
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_0 1073414144
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_1 327680
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3ffb0000, reg, 0) \
	fn(DT_N_S_soc_S_memory_3ffb0000, reg, 1)
#define DT_N_S_soc_S_memory_3ffb0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3ffb0000, compatible, 0)
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_3ffb0000_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/pinmux@3ff49000
 *
 * Node identifier: DT_N_S_soc_S_pinmux_3ff49000
 *
 * Binding (compatible = espressif,esp32-pinmux):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/espressif,esp32-pinmux.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pinmux_3ff49000_PATH "/soc/pinmux@3ff49000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pinmux_3ff49000_FULL_NAME "pinmux@3ff49000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_pinmux_3ff49000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_pinmux_3ff49000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pinmux_3ff49000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pinmux_3ff49000_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pinmux_3ff49000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pinmux_3ff49000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pinmux_3ff49000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_pinmux DT_N_S_soc_S_pinmux_3ff49000
#define DT_N_NODELABEL_pinmux              DT_N_S_soc_S_pinmux_3ff49000

/* Special property macros: */
#define DT_N_S_soc_S_pinmux_3ff49000_REG_NUM 1
#define DT_N_S_soc_S_pinmux_3ff49000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_REG_IDX_0_VAL_ADDRESS 1072992256 /* 0x3ff49000 */
#define DT_N_S_soc_S_pinmux_3ff49000_REG_IDX_0_VAL_SIZE 148 /* 0x94 */
#define DT_N_S_soc_S_pinmux_3ff49000_IRQ_NUM 0
#define DT_N_S_soc_S_pinmux_3ff49000_COMPAT_MATCHES_espressif_esp32_pinmux 1
#define DT_N_S_soc_S_pinmux_3ff49000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg {1072992256 /* 0x3ff49000 */, 148 /* 0x94 */}
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_IDX_0 1072992256
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_IDX_1 148
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pinmux_3ff49000, reg, 0) \
	fn(DT_N_S_soc_S_pinmux_3ff49000, reg, 1)
#define DT_N_S_soc_S_pinmux_3ff49000_P_reg_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible {"espressif,esp32-pinmux"}
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_IDX_0 "espressif,esp32-pinmux"
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pinmux_3ff49000, compatible, 0)
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_LEN 1
#define DT_N_S_soc_S_pinmux_3ff49000_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/spi@3ff64000
 *
 * Node identifier: DT_N_S_soc_S_spi_3ff64000
 *
 * Binding (compatible = espressif,esp32-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/espressif,esp32-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_3ff64000_PATH "/soc/spi@3ff64000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_3ff64000_FULL_NAME "spi@3ff64000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_3ff64000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_3ff64000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_3ff64000_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_3ff64000_REQUIRES_ORDS \
	7, /* /soc */ \
	14, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_3ff64000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_3ff64000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_spi DT_N_S_soc_S_spi_3ff64000
#define DT_N_NODELABEL_spi2             DT_N_S_soc_S_spi_3ff64000

/* Special property macros: */
#define DT_N_S_soc_S_spi_3ff64000_REG_NUM 1
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_VAL_ADDRESS 1073102848 /* 0x3ff64000 */
#define DT_N_S_soc_S_spi_3ff64000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_3ff64000_IRQ_NUM 0
#define DT_N_S_soc_S_spi_3ff64000_COMPAT_MATCHES_espressif_esp32_spi 1
#define DT_N_S_soc_S_spi_3ff64000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_spi_3ff64000_P_reg {1073102848 /* 0x3ff64000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_0 1073102848
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_3ff64000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, reg, 0) \
	fn(DT_N_S_soc_S_spi_3ff64000, reg, 1)
#define DT_N_S_soc_S_spi_3ff64000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_miso_pin 12
#define DT_N_S_soc_S_spi_3ff64000_P_miso_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_mosi_pin 13
#define DT_N_S_soc_S_spi_3ff64000_P_mosi_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_sclk_pin 14
#define DT_N_S_soc_S_spi_3ff64000_P_sclk_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_csel_pin 15
#define DT_N_S_soc_S_spi_3ff64000_P_csel_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_half_duplex 0
#define DT_N_S_soc_S_spi_3ff64000_P_half_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_dummy_comp 0
#define DT_N_S_soc_S_spi_3ff64000_P_dummy_comp_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_sio 0
#define DT_N_S_soc_S_spi_3ff64000_P_sio_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_dma 0
#define DT_N_S_soc_S_spi_3ff64000_P_dma_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clk_as_cs 0
#define DT_N_S_soc_S_spi_3ff64000_P_clk_as_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_positive_cs 0
#define DT_N_S_soc_S_spi_3ff64000_P_positive_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_label "SPI_2"
#define DT_N_S_soc_S_spi_3ff64000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, label, 0) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 1) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 2) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 3) \
	fn(DT_N_S_soc_S_spi_3ff64000, label, 4)
#define DT_N_S_soc_S_spi_3ff64000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_status "okay"
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_3ff64000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff64000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, status, 0) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 1) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 2) \
	fn(DT_N_S_soc_S_spi_3ff64000, status, 3)
#define DT_N_S_soc_S_spi_3ff64000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible {"espressif,esp32-spi"}
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0 "espressif,esp32-spi"
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, compatible, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_VAL_offset 6
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff64000, clocks, 0)
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_3ff64000_P_clocks_EXISTS 1

/*
 * Devicetree node: /soc/spi@3ff65000
 *
 * Node identifier: DT_N_S_soc_S_spi_3ff65000
 *
 * Binding (compatible = espressif,esp32-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/espressif,esp32-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_3ff65000_PATH "/soc/spi@3ff65000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_3ff65000_FULL_NAME "spi@3ff65000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_3ff65000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_3ff65000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_3ff65000_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_3ff65000_REQUIRES_ORDS \
	7, /* /soc */ \
	14, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_3ff65000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_3ff65000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_spi DT_N_S_soc_S_spi_3ff65000
#define DT_N_NODELABEL_spi3             DT_N_S_soc_S_spi_3ff65000

/* Special property macros: */
#define DT_N_S_soc_S_spi_3ff65000_REG_NUM 1
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_VAL_ADDRESS 1073106944 /* 0x3ff65000 */
#define DT_N_S_soc_S_spi_3ff65000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_3ff65000_IRQ_NUM 0
#define DT_N_S_soc_S_spi_3ff65000_COMPAT_MATCHES_espressif_esp32_spi 1
#define DT_N_S_soc_S_spi_3ff65000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_spi_3ff65000_P_reg {1073106944 /* 0x3ff65000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_0 1073106944
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_3ff65000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, reg, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000, reg, 1)
#define DT_N_S_soc_S_spi_3ff65000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_miso_pin 19
#define DT_N_S_soc_S_spi_3ff65000_P_miso_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_mosi_pin 23
#define DT_N_S_soc_S_spi_3ff65000_P_mosi_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_sclk_pin 18
#define DT_N_S_soc_S_spi_3ff65000_P_sclk_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_csel_pin 5
#define DT_N_S_soc_S_spi_3ff65000_P_csel_pin_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_half_duplex 0
#define DT_N_S_soc_S_spi_3ff65000_P_half_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_dummy_comp 0
#define DT_N_S_soc_S_spi_3ff65000_P_dummy_comp_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_sio 0
#define DT_N_S_soc_S_spi_3ff65000_P_sio_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_dma 0
#define DT_N_S_soc_S_spi_3ff65000_P_dma_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clk_as_cs 0
#define DT_N_S_soc_S_spi_3ff65000_P_clk_as_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_positive_cs 0
#define DT_N_S_soc_S_spi_3ff65000_P_positive_cs_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_label "SPI_3"
#define DT_N_S_soc_S_spi_3ff65000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, label, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 3) \
	fn(DT_N_S_soc_S_spi_3ff65000, label, 4)
#define DT_N_S_soc_S_spi_3ff65000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_status "okay"
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_3ff65000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_3ff65000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, status, 0) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 1) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 2) \
	fn(DT_N_S_soc_S_spi_3ff65000, status, 3)
#define DT_N_S_soc_S_spi_3ff65000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible {"espressif,esp32-spi"}
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0 "espressif,esp32-spi"
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, compatible, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_VAL_offset 16
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_3ff65000, clocks, 0)
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_3ff65000_P_clocks_EXISTS 1

/*
 * Devicetree node: /soc/trng@3ff75144
 *
 * Node identifier: DT_N_S_soc_S_trng_3ff75144
 *
 * Binding (compatible = espressif,esp32-trng):
 *   $ZEPHYR_BASE/dts/bindings/rng/espressif,esp32-trng.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_trng_3ff75144_PATH "/soc/trng@3ff75144"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_trng_3ff75144_FULL_NAME "trng@3ff75144"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_trng_3ff75144_PARENT DT_N_S_soc
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_trng_3ff75144_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_trng_3ff75144_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_trng_3ff75144_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_trng_3ff75144_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_trng_3ff75144_EXISTS 1
#define DT_N_INST_0_espressif_esp32_trng DT_N_S_soc_S_trng_3ff75144
#define DT_N_NODELABEL_trng0             DT_N_S_soc_S_trng_3ff75144

/* Special property macros: */
#define DT_N_S_soc_S_trng_3ff75144_REG_NUM 1
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_VAL_ADDRESS 1073172804 /* 0x3ff75144 */
#define DT_N_S_soc_S_trng_3ff75144_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_trng_3ff75144_IRQ_NUM 0
#define DT_N_S_soc_S_trng_3ff75144_COMPAT_MATCHES_espressif_esp32_trng 1
#define DT_N_S_soc_S_trng_3ff75144_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_trng_3ff75144_P_reg {1073172804 /* 0x3ff75144 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_0 1073172804
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_1 4
#define DT_N_S_soc_S_trng_3ff75144_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, reg, 0) \
	fn(DT_N_S_soc_S_trng_3ff75144, reg, 1)
#define DT_N_S_soc_S_trng_3ff75144_P_reg_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_label "TRNG_0"
#define DT_N_S_soc_S_trng_3ff75144_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, label, 0) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 1) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 2) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 3) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 4) \
	fn(DT_N_S_soc_S_trng_3ff75144, label, 5)
#define DT_N_S_soc_S_trng_3ff75144_P_label_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_status "okay"
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_trng_3ff75144_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_trng_3ff75144_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, status, 0) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 1) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 2) \
	fn(DT_N_S_soc_S_trng_3ff75144, status, 3)
#define DT_N_S_soc_S_trng_3ff75144_P_status_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible {"espressif,esp32-trng"}
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0 "espressif,esp32-trng"
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff75144, compatible, 0)
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_LEN 1
#define DT_N_S_soc_S_trng_3ff75144_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff40000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff40000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff40000_PATH "/soc/uart@3ff40000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff40000_FULL_NAME "uart@3ff40000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff40000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff40000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff40000_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff40000_REQUIRES_ORDS \
	7, /* /soc */ \
	14, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff40000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff40000_EXISTS 1
#define DT_N_ALIAS_uart_0                DT_N_S_soc_S_uart_3ff40000
#define DT_N_INST_0_espressif_esp32_uart DT_N_S_soc_S_uart_3ff40000
#define DT_N_NODELABEL_uart0             DT_N_S_soc_S_uart_3ff40000

/* Special property macros: */
#define DT_N_S_soc_S_uart_3ff40000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_VAL_ADDRESS 1072955392 /* 0x3ff40000 */
#define DT_N_S_soc_S_uart_3ff40000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff40000_IRQ_NUM 0
#define DT_N_S_soc_S_uart_3ff40000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff40000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff40000_P_reg {1072955392 /* 0x3ff40000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_0 1072955392
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff40000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, reg, 0) \
	fn(DT_N_S_soc_S_uart_3ff40000, reg, 1)
#define DT_N_S_soc_S_uart_3ff40000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_tx_pin 1
#define DT_N_S_soc_S_uart_3ff40000_P_tx_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_rx_pin 3
#define DT_N_S_soc_S_uart_3ff40000_P_rx_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_rts_pin 22
#define DT_N_S_soc_S_uart_3ff40000_P_rts_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_cts_pin 19
#define DT_N_S_soc_S_uart_3ff40000_P_cts_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_current_speed 115200
#define DT_N_S_soc_S_uart_3ff40000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_label "UART_0"
#define DT_N_S_soc_S_uart_3ff40000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, label, 0) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 1) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 2) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 3) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 4) \
	fn(DT_N_S_soc_S_uart_3ff40000, label, 5)
#define DT_N_S_soc_S_uart_3ff40000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3ff40000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_status "okay"
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_3ff40000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_3ff40000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, status, 0) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 1) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 2) \
	fn(DT_N_S_soc_S_uart_3ff40000, status, 3)
#define DT_N_S_soc_S_uart_3ff40000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_VAL_offset 2
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff40000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff40000_P_clocks_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff50000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff50000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff50000_PATH "/soc/uart@3ff50000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff50000_FULL_NAME "uart@3ff50000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff50000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff50000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff50000_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff50000_REQUIRES_ORDS \
	7, /* /soc */ \
	14, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff50000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff50000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_uart DT_N_S_soc_S_uart_3ff50000
#define DT_N_NODELABEL_uart1             DT_N_S_soc_S_uart_3ff50000

/* Special property macros: */
#define DT_N_S_soc_S_uart_3ff50000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_VAL_ADDRESS 1073020928 /* 0x3ff50000 */
#define DT_N_S_soc_S_uart_3ff50000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff50000_IRQ_NUM 0
#define DT_N_S_soc_S_uart_3ff50000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff50000_STATUS_disabled 1

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff50000_P_reg {1073020928 /* 0x3ff50000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_0 1073020928
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff50000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, reg, 0) \
	fn(DT_N_S_soc_S_uart_3ff50000, reg, 1)
#define DT_N_S_soc_S_uart_3ff50000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_tx_pin 10
#define DT_N_S_soc_S_uart_3ff50000_P_tx_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_rx_pin 9
#define DT_N_S_soc_S_uart_3ff50000_P_rx_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_rts_pin 11
#define DT_N_S_soc_S_uart_3ff50000_P_rts_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_cts_pin 6
#define DT_N_S_soc_S_uart_3ff50000_P_cts_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_current_speed 115200
#define DT_N_S_soc_S_uart_3ff50000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_label "UART_1"
#define DT_N_S_soc_S_uart_3ff50000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, label, 0) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 1) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 2) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 3) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 4) \
	fn(DT_N_S_soc_S_uart_3ff50000, label, 5)
#define DT_N_S_soc_S_uart_3ff50000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_hw_flow_control 1
#define DT_N_S_soc_S_uart_3ff50000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_status "disabled"
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff50000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff50000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, status, 0) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 1) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 2) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 3) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 4) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 5) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 6) \
	fn(DT_N_S_soc_S_uart_3ff50000, status, 7)
#define DT_N_S_soc_S_uart_3ff50000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_VAL_offset 5
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff50000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff50000_P_clocks_EXISTS 1

/*
 * Devicetree node: /soc/uart@3ff6e000
 *
 * Node identifier: DT_N_S_soc_S_uart_3ff6e000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3ff6e000_PATH "/soc/uart@3ff6e000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3ff6e000_FULL_NAME "uart@3ff6e000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3ff6e000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3ff6e000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3ff6e000_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3ff6e000_REQUIRES_ORDS \
	7, /* /soc */ \
	14, /* /soc/rtc@3ff48000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3ff6e000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3ff6e000_EXISTS 1
#define DT_N_INST_2_espressif_esp32_uart DT_N_S_soc_S_uart_3ff6e000
#define DT_N_NODELABEL_uart2             DT_N_S_soc_S_uart_3ff6e000

/* Special property macros: */
#define DT_N_S_soc_S_uart_3ff6e000_REG_NUM 1
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_VAL_ADDRESS 1073143808 /* 0x3ff6e000 */
#define DT_N_S_soc_S_uart_3ff6e000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_3ff6e000_IRQ_NUM 0
#define DT_N_S_soc_S_uart_3ff6e000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_3ff6e000_STATUS_disabled 1

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3ff6e000_P_reg {1073143808 /* 0x3ff6e000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_0 1073143808
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, reg, 0) \
	fn(DT_N_S_soc_S_uart_3ff6e000, reg, 1)
#define DT_N_S_soc_S_uart_3ff6e000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_tx_pin 17
#define DT_N_S_soc_S_uart_3ff6e000_P_tx_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_rx_pin 16
#define DT_N_S_soc_S_uart_3ff6e000_P_rx_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_rts_pin 7
#define DT_N_S_soc_S_uart_3ff6e000_P_rts_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_cts_pin 8
#define DT_N_S_soc_S_uart_3ff6e000_P_cts_pin_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_current_speed 115200
#define DT_N_S_soc_S_uart_3ff6e000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_label "UART_2"
#define DT_N_S_soc_S_uart_3ff6e000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, label, 0) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 1) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 2) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 3) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 4) \
	fn(DT_N_S_soc_S_uart_3ff6e000, label, 5)
#define DT_N_S_soc_S_uart_3ff6e000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_hw_flow_control 1
#define DT_N_S_soc_S_uart_3ff6e000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_status "disabled"
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_3ff6e000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_3ff6e000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, status, 0) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 1) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 2) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 3) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 4) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 5) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 6) \
	fn(DT_N_S_soc_S_uart_3ff6e000, status, 7)
#define DT_N_S_soc_S_uart_3ff6e000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, compatible, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_3ff48000
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_VAL_offset 23
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3ff6e000, clocks, 0)
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_3ff6e000_P_clocks_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@3ff5f048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_3ff5f048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_3ff5f048_PATH "/soc/watchdog@3ff5f048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_3ff5f048_FULL_NAME "watchdog@3ff5f048"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_3ff5f048_PARENT DT_N_S_soc
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_3ff5f048_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_3ff5f048_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_3ff5f048_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_3ff5f048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_3ff5f048_EXISTS 1
#define DT_N_INST_0_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_3ff5f048
#define DT_N_NODELABEL_wdt0                  DT_N_S_soc_S_watchdog_3ff5f048

/* Special property macros: */
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_VAL_ADDRESS 1073082440 /* 0x3ff5f048 */
#define DT_N_S_soc_S_watchdog_3ff5f048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_3ff5f048_IRQ_NUM 0
#define DT_N_S_soc_S_watchdog_3ff5f048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_3ff5f048_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg {1073082440 /* 0x3ff5f048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_0 1073082440
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, reg, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, reg, 1)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label "WDT_0"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 1) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 2) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 3) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, label, 4)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_label_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status "okay"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 1) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 2) \
	fn(DT_N_S_soc_S_watchdog_3ff5f048, status, 3)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff5f048, compatible, 0)
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_3ff5f048_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@3ff60048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_3ff60048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_3ff60048_PATH "/soc/watchdog@3ff60048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_3ff60048_FULL_NAME "watchdog@3ff60048"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_3ff60048_PARENT DT_N_S_soc
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_3ff60048_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_3ff60048_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_3ff60048_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_3ff60048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_3ff60048_EXISTS 1
#define DT_N_INST_1_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_3ff60048
#define DT_N_NODELABEL_wdt1                  DT_N_S_soc_S_watchdog_3ff60048

/* Special property macros: */
#define DT_N_S_soc_S_watchdog_3ff60048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_VAL_ADDRESS 1073086536 /* 0x3ff60048 */
#define DT_N_S_soc_S_watchdog_3ff60048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_3ff60048_IRQ_NUM 0
#define DT_N_S_soc_S_watchdog_3ff60048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_3ff60048_STATUS_disabled 1

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg {1073086536 /* 0x3ff60048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_0 1073086536
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, reg, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, reg, 1)
#define DT_N_S_soc_S_watchdog_3ff60048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_label "WDT_1"
#define DT_N_S_soc_S_watchdog_3ff60048_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, label, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 1) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 2) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 3) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, label, 4)
#define DT_N_S_soc_S_watchdog_3ff60048_P_label_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_status "disabled"
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, status, 0) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 1) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 2) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 3) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 4) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 5) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 6) \
	fn(DT_N_S_soc_S_watchdog_3ff60048, status, 7)
#define DT_N_S_soc_S_watchdog_3ff60048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_3ff60048, compatible, 0)
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_3ff60048_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000
 *
 * Binding (compatible = espressif,esp32-flash-controller):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/espressif,esp32-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_PATH "/soc/flash-controller@3ff42000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_FULL_NAME "flash-controller@3ff42000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_3ff42000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_ORD 27

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_SUPPORTS_ORDS \
	28, /* /soc/flash-controller@3ff42000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_flash_controller DT_N_S_soc_S_flash_controller_3ff42000
#define DT_N_NODELABEL_flash                         DT_N_S_soc_S_flash_controller_3ff42000

/* Special property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_VAL_ADDRESS 1072963584 /* 0x3ff42000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_COMPAT_MATCHES_espressif_esp32_flash_controller 1
#define DT_N_S_soc_S_flash_controller_3ff42000_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label "FLASH_CTRL"
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, label, 9)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg {1072963584 /* 0x3ff42000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_0 1072963584
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible {"espressif,esp32-flash-controller"}
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0 "espressif,esp32-flash-controller"
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_PATH "/soc/flash-controller@3ff42000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@3ff42000) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_3ff42000
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_ORD 28

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REQUIRES_ORDS \
	27, /* /soc/flash-controller@3ff42000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_SUPPORTS_ORDS \
	29, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0

/* Special property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_REG_IDX_0_VAL_SIZE 4194304 /* 0x400000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_STATUS_okay 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label "FLASH_ESP32"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 9) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, label, 10)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_erase_block_size 4096
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_write_block_size 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_write_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status "okay"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, status, 3)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_status_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg {0 /* 0x0 */, 4194304 /* 0x400000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_1 4194304
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/partition.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_PATH "/soc/flash-controller@3ff42000/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/soc/flash-controller@3ff42000/flash@0) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_ORD 29

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_REQUIRES_ORDS \
	28, /* /soc/flash-controller@3ff42000/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_SUPPORTS_ORDS \
	30, /* /soc/flash-controller@3ff42000/flash@0/partitions/partition@9000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions

/* Special property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_STATUS_okay 1

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flash-controller@3ff42000/flash@0/partitions/partition@9000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_PATH "/soc/flash-controller@3ff42000/flash@0/partitions/partition@9000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_FULL_NAME "partition@9000"

/* Node parent (/soc/flash-controller@3ff42000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_PARENT DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_FOREACH_CHILD_STATUS_OKAY(fn) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_ORD 30

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_REQUIRES_ORDS \
	29, /* /soc/flash-controller@3ff42000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000

/* Special property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_REG_IDX_0_VAL_ADDRESS 36864 /* 0x9000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_REG_IDX_0_VAL_SIZE 24576 /* 0x6000 */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_STATUS_okay 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_label "storage"
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, label, 6)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_reg {36864 /* 0x9000 */, 24576 /* 0x6000 */}
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_reg_IDX_0 36864
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_reg_IDX_1 24576
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000, reg, 1)
#define DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000_P_reg_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_entropy                 DT_N_S_soc_S_trng_3ff75144
#define DT_CHOSEN_zephyr_entropy_EXISTS          1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_soc_S_flash_controller_3ff42000
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_sram                    DT_N_S_soc_S_memory_3ffb0000
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_uart_3ff40000
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_uart_3ff40000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_soc_S_flash_controller_3ff42000_S_flash_0_S_partitions_S_partition_9000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_espressif_esp32 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_rtc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_uart 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_pinmux 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_gpio 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_i2c 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_trng 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_watchdog 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_spi 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_timer 1
#define DT_COMPAT_HAS_OKAY_cadence_tensilica_xtensa_lx6 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_espressif_esp32_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_rtc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_uart_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_pinmux_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_gpio_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_i2c_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_trng_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_watchdog_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_spi_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_timer_NUM_OKAY 4
#define DT_N_INST_cadence_tensilica_xtensa_lx6_NUM_OKAY 2
#define DT_FOREACH_OKAY_INST_espressif_esp32(fn) fn(0)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_espressif_esp32_rtc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_espressif_esp32_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_espressif_esp32_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_espressif_esp32_pinmux(fn) fn(0)
#define DT_FOREACH_OKAY_INST_espressif_esp32_gpio(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_espressif_esp32_i2c(fn) fn(0)
#define DT_FOREACH_OKAY_INST_espressif_esp32_trng(fn) fn(0)
#define DT_FOREACH_OKAY_INST_espressif_esp32_watchdog(fn) fn(0)
#define DT_FOREACH_OKAY_INST_espressif_esp32_spi(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_espressif_esp32_timer(fn) fn(0) fn(1) fn(2) fn(3)
#define DT_FOREACH_OKAY_INST_cadence_tensilica_xtensa_lx6(fn) fn(0) fn(1)

/*
 * Bus information for status "okay" nodes of each compatible
 */
